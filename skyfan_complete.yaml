substitutions:
  device_name: skyfandc
  temp_name: SkyFanDC-Temp
  skyfan_model: "SKY1203"
  light_name: "Light"
  fan_name: "Fan"
  power_fan_name: "$fan_name" Power
  power_light_name: "$light_name" Power

esphome:
  name: ${device_name}
  name_add_mac_suffix: true
  project:
    name: timothyarnold1982.VentairSkyfanDC
    version: "0.9"
#  on_boot: #Setup temperature reading so you don't get a random reading come through at startup
#    priority: -100
#    then:
#      - switch.turn_on: led
#      - delay: 2s
#      - switch.turn_off: led
      
esp8266:
  board: d1_mini

#Dashboard import if you want to adopt the device on your esphome dashboard
dashboard_import:
  package_import_url: github://timothyarnold1982/VentairSkyfanDC/skyfan_complete.yaml@main

api:

# Logger not using the serial port as tuya needs it
logger:
  baud_rate: 0

# Version 0.2 has an i2c JST SH 4Pin Plug and uses the following pins
# Version 0.1 did use pin 4 as the power pin for the NTC
i2c:
  sda: 4
  scl: 5
  scan: true
ota:
  - platform: esphome

wifi:
  ssid: "DecoS4"
  password: "BK^7$688i3V*"
  manual_ip:
    static_ip: 192.168.68.134 #your_device_ip_here
    gateway: 192.168.68.1 #your_gateway_here
    subnet: 255.255.255.0
    
captive_portal:

uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600

tuya:
  id: tuyamcu
  on_datapoint_update:
    - sensor_datapoint: 1
      datapoint_type: bool
      then:
        - switch.turn_on: update_fan
    - sensor_datapoint: 2
      datapoint_type: enum
      then:
        - switch.turn_on: update_fan 
    - sensor_datapoint: 3
      datapoint_type: int
      then:
        - switch.turn_on: update_fan
    - sensor_datapoint: 8
      datapoint_type: enum
      then:
        - switch.turn_on: update_fan
    - sensor_datapoint: 22
      datapoint_type: enum
      then: []

switch:
  - platform: gpio
    pin:
      number: 2
      inverted: true
    id: led
  - id: update_fan
    platform: template
    optimistic: true
    turn_on_action:
      then:
        - delay: 200ms
        - if:
            condition: 
              - switch.is_on: datapoint_onoff
            then:
              - if:
                  condition:
                    - lambda: 'return ( id(datapoint_mode).active_index() == 1 );'
                  then:
                    - logger.log: "update_fan ECO therefore set speed 2"
                    - fan.turn_on: 
                        id: skyfan
                        speed: '2'
                        direction: !lambda |-
                          bool val = ( id(datapoint_direction).active_index() != 0 );
                          return val ? FanDirection::REVERSE : FanDirection::FORWARD;
                  else:
                    - if:
                        condition:
                          - lambda: 'return ( id(datapoint_speed).state == 1 );'
                        then:
                          - logger.log: "update_fan Set speed 1"
                          - fan.turn_on: 
                              id: skyfan
                              speed: '1'
                              direction: !lambda |-
                                bool val = ( id(datapoint_direction).active_index() != 0 );
                                return val ? FanDirection::REVERSE : FanDirection::FORWARD;
                        else:
                          - logger.log: "update_fan Set speed plus 1"
                          - fan.turn_on: 
                              id: skyfan
                              speed: !lambda |-
                                return (id(datapoint_speed).state + 1);
                              direction: !lambda |-
                                bool val = ( id(datapoint_direction).active_index() != 0 );
                                return val ? FanDirection::REVERSE : FanDirection::FORWARD;
            else:
              - logger.log: "update_fan Turn off"
              - fan.turn_off: 
                  id: skyfan            

  - id: datapoint_onoff
    platform: tuya
    tuya_id: tuyamcu
    name: ${fan_name} Switch
    switch_datapoint: 1
    internal: true


fan:
  - id: skyfan
    platform: speed
    output: skyfan_speed
    direction_output: skyfan_direction
    name: ${fan_name}
    restore_mode: NO_RESTORE
    disabled_by_default: false
    speed_count: 6

output:
  # When the fan speed is changed by the fan entity in Home Assistant, update
  # the tuyamcu datapoints that control the fan motor.
  - id: skyfan_speed
    platform: template
    type: float
    write_action: 
      then:
        - if:
            condition:
              - switch.is_on: update_fan
            then:
              - switch.turn_off: update_fan            
            else:             
              - logger.log:
                  format: "skyfan_speed is %1f"
                  args: [ 'state' ]
              - select.set_index:
                  id: datapoint_direction
                  index: !lambda |-
                    return (id(skyfan).direction != FanDirection::FORWARD ? 1 : 0);              
              - if:
                  condition:
                    lambda: 'return state < 0.1 ;'
                  then:
                    - switch.turn_off: datapoint_onoff
                  else:
                    - switch.turn_on: datapoint_onoff                                     
                    - if:
                        condition:
                          lambda: 'return (state < 0.3);'
                        then:
                          - select.set_index:
                              id: datapoint_mode
                              index: 0
                          - number.set:
                              id: datapoint_speed
                              value: 1
                        else:
                          - if:
                              condition:
                                lambda: 'return (state < 0.4);'
                              then:
                                - select.set_index:
                                    id: datapoint_mode
                                    index: 1
                              else:                        
                                - select.set_index:
                                    id: datapoint_mode
                                    index: 0
                                - if:
                                    condition:
                                      lambda: 'return (state < 0.6);'
                                    then:
                                      - number.set:
                                          id: datapoint_speed
                                          value: 2
                                    else:                  
                                      - if:
                                          condition:
                                            lambda: 'return (state < 0.8);'
                                          then:
                                            - number.set:
                                                id: datapoint_speed
                                                value: 3
                                          else:                              
                                            - if:
                                                condition:
                                                  lambda: 'return (state < 0.9);'
                                                then:
                                                  - number.set:
                                                      id: datapoint_speed
                                                      value: 4
                                                else:                              
                                                  - number.set:
                                                      id: datapoint_speed
                                                      value: 5        

  - id: skyfan_direction
    platform: template
    type: binary
    write_action: []
  
  
select:
  - id: datapoint_mode
    platform: tuya
    tuya_id: tuyamcu
    name: ${fan_name} Mode
    enum_datapoint: 2
    options:
      0: Normal
      1: Eco
      2: Sleep
    disabled_by_default: false
    
  - platform: tuya
    name: ${light_name} Color Temperature
    enum_datapoint: 19
    options:
      0: Cool White
      1: Natural White
      2: Warm White
    disabled_by_default: false

  - id: datapoint_direction
    platform: tuya
    tuya_id: tuyamcu
    name: ${fan_name} Direction
    enum_datapoint: 8
    options:
      0: Forward
      1: Reverse
    disabled_by_default: false

  - id: datapoint_timer
    platform: tuya
    tuya_id: tuyamcu
    name: ${fan_name} Timer
    enum_datapoint: 22
    options:
      0: Inactive
      1: 1 hour
      2: 2 hours
      3: 3 hours
      4: 4 hours
      5: 5 hours
      6: 6 hours
      7: 7 hours
      8: 8 hours
      9: 9 hours
      10: 10 hours
      11: 11 hours
      12: 12 hours
    disabled_by_default: false

number:
  - id: datapoint_speed
    platform: tuya
    tuya_id: tuyamcu
    name: ${fan_name} Speed
    number_datapoint: 3
    min_value: 0
    max_value: 5
    step: 1
    internal: true

light:
  - id: skyfan_light
    platform: tuya
    name: ${light_name}
    switch_datapoint: 15
    dimmer_datapoint: 16
    min_value: 0

sensor:
  - id: fan_power
    platform: template
    name: ${power_fan_name}
    update_interval: 30s
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      float SKY903[7] = {0,3,4.8,7,12,19.5,32};
      float SKY1203[7] = {0,3.6,5.4,8,15,22,32.5};
      float SKY1303[7] = {0,3.9,5.8,9,15.6,25.2,31.8};
      float SKY1503[7] = {0,3.9,6,9,16,26,44.2};
      float SKY1204[7] = {0,3.8,5.8,9,17,27,30};
      float SKY1404[7] = {0,3.5,5.5,8,15,23,38};      
      if (id(skyfan).state) {
        return $skyfan_model[ id(skyfan).speed ]; 
      } else {
        return 0.0;
      }
    disabled_by_default: false
    max_value: 5
    restore_mode: ALWAYS_OFF
    disabled_by_default: false

  - id: power_light
    platform: template
    name: ${power_light_name}
    unit_of_measurement: "W"
    device_class: "power"
    state_class: "measurement"
    accuracy_decimals: 1
    disabled_by_default: true

interval:
  - interval: 30s
    then:
      - if:
          condition:
            light.is_on: skyfan_light
          then:
            - sensor.template.publish:
                id: power_light
                state: !lambda |-
                  return (id(skyfan_light).current_values.get_brightness() * 20); 
          else:
            - sensor.template.publish:
                id: power_light
                state: !lambda |-
                  return 0.0;
